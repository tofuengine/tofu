#!/usr/bin/env lua5.4

--[[
MIT License

Copyright (c) 2019-2023 Marco Lizza

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
]]--

local argparse = require("argparse")
local lfs = require("lfs")
local luazen = require("luazen")

function string:at(index)
  return self:sub(index, index)
end

function string:starts_with(prefix)
  return self:sub(1, #prefix) == prefix
end

function string:ends_with(suffix)
  return self:sub(1 + self:len() - #suffix) == suffix
end

function string.from_hex(str)
  return str:gsub('..', function(cc)
        return string.char(tonumber(cc, 16))
    end)
end

function string.to_hex(str)
  return str:gsub('.', function(c)
        return string.format('%02X', string.byte(c))
    end)
end

local function attrdir(path, name, files)
  local mode = lfs.attributes(path, "mode")
  if mode == "file" then
    local size = lfs.attributes(path, "size")
    table.insert(files, { pathfile = path, size = size, name = not name and path or name })
    return files
  end

  for entry in lfs.dir(path) do
    if entry ~= "." and entry ~= ".." then
      local subpath = path .. "/" .. entry
      local subname = not name and entry or name .. "/" .. entry
      attrdir(subpath, subname, files)
    end
  end
  return files
end

local function fetch_files(paths, flags)
  local files = {}
  for _, path in ipairs(paths) do
    if not flags.quiet then
      print(string.format("Fetching files from folder `%s`", path))
    end
    for _, file in ipairs(attrdir(path, nil, {})) do
      table.insert(files, file)
    end
  end
  if not flags.quiet then
    print(string.format("Optimizing..."))
  end
  table.sort(files, function(lhs, rhs) return lhs.pathfile < rhs.pathfile end)
  return files
end

local function emit_header(writer)
  writer:write([[
-- This file has been autogenerated.
local Storage = require("tofu.io.storage")

local FILES <const> = {
]])
end

local function emit_entry(writer, file)
  local name = string.gsub(string.lower(file.name), "\\", "/") -- Fix Windows' path separators.

  local reader = io.open(file.pathfile, "rb")
  if not reader then
    print(string.format("*** can't access file `%s`", file.pathfile))
    return false
  end

  local data = luazen.b64encode(reader:read("*all"), 0)

  writer:write(string.format("  [\"%s\"] = {\n", name))
  while #data > 0 do
    local lump = data:sub(1, 100)
    local is_last_one = #data <= 100
    writer:write(string.format("    \"%s\"%s", lump, is_last_one and "\n" or ",\n"))
    data = data:sub(#lump + 1)
  end
  writer:write(string.format("  },\n", name))

  reader:close()

  return true
end

local function emit_trailer(writer)
  writer:write([[
}

for name, lumps in pairs(FILES) do
  local bytes = ""
  for _, lump in ipairs(lumps) do
    bytes = bytes .. lump
  end
  Storage.inject(name, bytes)
end
]])
end

local function emit(output, flags, files)
  if not output:ends_with(".lua") then
    output = output .. ".lua"
  end

  local writer = io.open(output, "w")
  if not writer then
    print(string.format("*** can't create file `%s`", output))
    return false
  end

  local success = false

  emit_header(writer)
  for _, file in ipairs(files) do
    success = emit_entry(writer, file)
    if not success then
      break
    end
  end
  emit_trailer(writer)

  writer:close()

  if not success then
    os.remove(output)
  end

  return success
end

local function main(arg)
  -- https://argparse.readthedocs.io/en/stable/options.html#flags
  local parser = argparse()
    :name("loadgen")
    :description("Load generator.")
  parser:argument("input")
    :description("Paths to be converted. Can be either single files or directories (which are recursively scanned).")
    :args("+")
  parser:option("-o --output")
    :description("Name of the the generated file.")
    :default("aout.lua")
    :count(1)
    :args(1)
  parser:flag("-q --quiet")
    :description("Enables quiet output during operations.")
  local args = parser:parse(arg)

  local flags = {}
  for _, flag in ipairs({ "quiet" }) do
    flags[flag] = args[flag] and true or false
  end

  if not flags.quiet then
    print("LoadGen v0.2.0")
    print("==============")
  end

  local files = fetch_files(args.input, flags)

  if not flags.quiet then
    print(string.format("Creating preload `%s` w/ %d entries", args.output, #files))
  end

  local success = emit(args.output, flags, files)

  if not flags.quiet then
    if success then
      print("Done!")
    else
      print("Failed!")
    end
  end

  os.exit(not success and -1 or 0)
end

main(arg)
